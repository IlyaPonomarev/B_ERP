#Область ПрограммныйИнтерфейс

#Область Проведение

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый документ.
//  Отказ - Булево - Признак проведения документа.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то проведение документа выполнено не будет.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
&После("ОбработкаПроведения")
Процедура RA_AdditionalFieldsОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт

	#Область НастройкиАналитикиУчетаНоменклатуры
	
	МассивАналитикУчетаНоменклатуры = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Объект.Товары.ВыгрузитьКолонку(
		"АналитикаУчетаНоменклатуры"));

	СоответствиеНастроек = Новый Соответствие;

	Для Каждого АналитикаУчета Из МассивАналитикУчетаНоменклатуры Цикл
	
		//@skip-check bsl-legacy-check-string-literal
		ПодразделениеПодмены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АналитикаУчета,
			"Назначение.RA_AdditionalFields_CostCentre");

		Если ЗначениеЗаполнено(ПодразделениеПодмены) Тогда
			СоответствиеНастроек.Вставить(АналитикаУчета, ПодразделениеПодмены);
		КонецЕсли;

	КонецЦикла;

	Если Не СоответствиеНастроек.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Закупки
	
	Объект.Движения["Закупки"].Записывать = Истина;
	
	Для Каждого ДвижениеЗакупка ИЗ Объект.Движения["Закупки"] Цикл
	
		ПодразделениеПодмены = СоответствиеНастроек.Получить(ДвижениеЗакупка.АналитикаУчетаНоменклатуры);
	
		Если ПодразделениеПодмены = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		ДвижениеЗакупка.Подразделение = ПодразделениеПодмены;	
		
	КонецЦикла;
	
	#КонецОбласти
	
//	#Область СебестоимостьТоваров
//	
//	Объект.Движения["СебестоимостьТоваров"].Записывать = Истина;
//
//	Для Каждого ДвижениеСебестоимость Из Объект.Движения["СебестоимостьТоваров"] Цикл
//
//		ПодразделениеПодмены = СоответствиеНастроек.Получить(ДвижениеСебестоимость.АналитикаУчетаНоменклатуры);
//
//		Если ПодразделениеПодмены = Неопределено Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		ДвижениеСебестоимость.Подразделение = ПодразделениеПодмены;
//		
//	КонецЦикла;
//	
//	Объект.Движения["СебестоимостьТоваров"].Записать();
//	
//	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти